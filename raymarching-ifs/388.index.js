"use strict";(self.webpackChunk_kkngsm_works=self.webpackChunk_kkngsm_works||[]).push([[388],{388:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});var i=t(376),s=t(477);class r extends class{constructor(e){this.canvas=e}resizeCanvas(e,n){const t={width:this.canvas.width,height:this.canvas.height};this.prevSize=t,this.canvas.width=e,this.canvas.height=n}fullscreen(){document.mozFullScreenElement||document.webkitCurrentFullScreenElement||document.fullscreenElement?this.canvas.cancelFullscreen?this.canvas.cancelFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitCancelFullScreen&&document.webkitCancelFullScreen():(this.resize(window.screen.width,window.screen.height),window.scrollTo(0,0),this.canvas.requestFullscreen?this.canvas.requestFullscreen():this.canvas.mozRequestFullScreen?this.canvas.mozRequestFullScreen():this.canvas.webkitRequestFullscreen&&this.canvas.webkitRequestFullscreen())}cancelFullscreen(){document.mozFullScreenElement||document.webkitCurrentFullScreenElement||document.fullscreenElement||this.resize(this.prevSize.width,this.prevSize.height)}isSmartPhone(){return!!window.navigator.userAgent.match(/iPhone|Android.+Mobile/)}mouseMove(e){this.canvas.addEventListener("mousemove",(n=>{const t=this.canvas.getBoundingClientRect(),i=n.clientX-t.left,r=n.clientY-t.top;e.value=new s.FM8(i/this.canvas.width,1-r/this.canvas.height)}),!0),this.canvas.addEventListener("touchmove",(n=>{n.preventDefault();const t=this.canvas.getBoundingClientRect();if(n.changedTouches[0]){const i=n.changedTouches[0].clientX-t.left,r=n.changedTouches[0].clientY-t.top;e.value=new s.FM8(i/this.canvas.width,1-r/this.canvas.height)}}),!0)}mouseClick(e){this.canvas.addEventListener("mousedown",(()=>{e.value=1}),!0),this.canvas.addEventListener("touchstart",(()=>{e.value=1}),!0),this.canvas.addEventListener("mouseup",(()=>{e.value=0}),!0),this.canvas.addEventListener("touchend",(()=>{e.value=0}),!0)}}{constructor(e){super(e),this.renderer=new s.CP7({canvas:e}),this.scene=new s.xsS,this.camera=new s.iKG(-.5,.5,.5,-.5,-1e4,1e4),this.camera.position.z=100,this.scene.add(this.camera),this.uniforms={screenWidth:{type:"f",value:void 0},screenHeight:{type:"f",value:void 0},previous:{type:"t",value:void 0},_Box_width:{type:"f",value:.5},_Box_height:{type:"f",value:.5},_Box_space:{type:"f",value:.5},_Twist:{type:"f",value:.5},time:{type:"f",value:0}};const n="\nout vec2 fragCoord;\nvoid main()\n{\n    fragCoord = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}";this.RayMarchingMaterial=new s.jyz({uniforms:this.uniforms,vertexShader:n,fragmentShader:"\nin vec2 fragCoord;\nlayout (location = 0) out vec4 fragColor;\nuniform float screenWidth;\nuniform float screenHeight;\nuniform float time;\n\nuniform float _Box_width;\nuniform float _Box_height;\nuniform float _Box_space;\nuniform float _Twist;\n\nfloat sdRoundBox( vec3 p, vec3 b, float r ){\n        vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sd4Box( vec3 p, vec3 b, float e ){\n        p = abs(p)-b;\n    vec3 q = abs(p+e)-e;\n    return length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0);\n}\n\nfloat sdCylinder( vec3 p, vec3 c ){\n        return length(p.xz-c.xy)-c.z;\n}\n\nmat2 rotate2D(float a){\n        float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\n#define ITER 4\nfloat ifs(vec3 p){\n        mat2 rot = rotate2D(1.03);\n    for(int i=0; i<ITER; i++){\n            p = abs(p)-.075;\n        p.xz *= rot;\n        p.xy *= rot;\n    }\n    return sdRoundBox(p, vec3(.05), 0.004);\n}\n\nfloat dist_func(vec3 p){\n    float d = ifs(p);\n\n    vec3 q = p;\n    q.xz *= rotate2D(-_Twist*p.y+time*0.3);\n    q.y = p.y;\n\n    d = min(d, sd4Box(q, vec3(_Box_space, _Box_height, _Box_space), _Box_space*_Box_width)-0.005);\n    return min(d, sdCylinder( p, vec3(0,0,  _Box_space*0.3) ));\n}\n\nvec3 get_n(vec3 p){\n    float ep = 0.0001;\n    vec3 epx = vec3(ep, 0., 0.);\n    vec3 epy = vec3(0., ep, 0.);\n    vec3 epz = vec3(0., 0., ep);\n    return normalize(vec3(\n        dist_func(p+epx)-dist_func(p-epx),\n        dist_func(p+epy)-dist_func(p-epy),\n        dist_func(p+epz)-dist_func(p-epz)\n    ));\n}\n\n#define MAX_MARCH 64\nvoid main() {\n    vec2 resolution = vec2(screenWidth, screenHeight);\n    float t = time*0.1;\n    vec2 uv = (fragCoord * 2. - 1.)*resolution/min(resolution.x,resolution.y);\n    uv /= 1. + length(uv)*.1;\n\n    // camera\n    vec3 camera = vec3(0);\n    vec3 ro = vec3(cos(t)*1.5, 0, sin(t)*1.5) + camera;\n\n    vec3 lookat = vec3(0) + camera;\n    float zoom = 1.5;\n    vec3 lightdir = vec3(0,-1,1);\n\n    vec3 f = normalize(lookat-ro);\n    vec3 vertical = normalize(cross(vec3(0,1,0), f));\n    vec3 horizontal = cross(f, vertical);\n    vec3 i = ro + f*zoom + uv.x * vertical + uv.y * horizontal;\n    // ray direction\n    vec3 rdir = normalize(i - ro);\n\n    vec3 ray = ro;\n    vec3 col = vec3(1);\n\n    float d;\n    float dmin = 1.;\n    int march;\n    for(march = 0; march < MAX_MARCH; march++){\n            d = dist_func(ray);\n        dmin = min(dmin, d);\n        if(d < 0.001){\n                break;\n        }\n        ray += rdir * d*0.5;\n    }\n\n    if(d < 0.001){\n            vec3 n = get_n(ray);\n        col = vec3(dot(n, -rdir)*0.7+0.3);\n    }\n\n    float closeness = float(march) / float(MAX_MARCH);\n    float ao = 1.0 - closeness;\n    col *= ao;\n\n    float glow = pow(dmin + 2., -1.5);\n    col += glow;\n\n    fragColor.xyz = col;\n    fragColor.w = 1.;\n}",glslVersion:s.LSk}),this.ScreenMaterial=new s.jyz({uniforms:this.uniforms,vertexShader:n,fragmentShader:"\nin vec2 fragCoord;\nlayout (location = 0) out vec4 fragColor;\nuniform float screenWidth;\nuniform float screenHeight;\nuniform sampler2D previous;\n\nvec4 chromaticAberration(sampler2D tex, vec2 fragCoord, float dist){\n    vec2 uv = (fragCoord * 2.) -1.;\n    float R = texture(tex, (uv * dist + 1.) * 0.5).x;\n    float G = texture(tex, (uv / dist + 1.) * 0.5).y;\n    vec2 BA = texture(tex, fragCoord).zw;\n    return vec4(R, G, BA);\n}\n\nvoid main() {\n    vec3 col = chromaticAberration(previous, fragCoord, 1.01).xyz;\n    fragColor.xyz = col;\n    fragColor.w = 1.;\n}",glslVersion:s.LSk});const t=new s._12(1,1);this.mesh=new s.Kj0(t,this.ScreenMaterial),this.scene.add(this.mesh),this.resize(this.canvas.clientWidth,this.canvas.clientHeight),this.guiParam=this.addGUI()}static async build(e){return new r(e)}resize(e,n){this.resizeCanvas(e,n),this.renderer.setSize(e,n),this.Tex=new s.dd2(e,n,{minFilter:s.wem,magFilter:s.wem,format:s.wk1,type:s.ywz}),this.uniforms.screenWidth.value=e,this.uniforms.screenHeight.value=n}render(e){this.uniforms._Box_width.value=this.guiParam.Box_width,this.uniforms._Box_height.value=this.guiParam.Box_height,this.uniforms._Box_space.value=this.guiParam.Box_space,this.uniforms._Twist.value=this.guiParam.Twist,this.uniforms.time.value=.001*e,this.mesh.material=this.RayMarchingMaterial,this.renderer.setRenderTarget(this.Tex),this.renderer.clear(),this.renderer.render(this.scene,this.camera),this.mesh.material=this.ScreenMaterial,this.uniforms.previous.value=this.Tex.texture,this.renderer.setRenderTarget(null),this.renderer.clear(),this.renderer.render(this.scene,this.camera),this.requestId=requestAnimationFrame((e=>this.render(e)))}addGUI(){const e={Box_width:.1,Box_height:2,Box_space:.06,Twist:4.2};return this.gui=new i.XS,this.gui.add(e,"Box_width",.001,.499),this.gui.add(e,"Box_height",.001,1.999),this.gui.add(e,"Box_space",.001,.999),this.gui.add(e,"Twist",.001,4.999),this.gui.open(),e}remove(){cancelAnimationFrame(this.requestId),this.gui.destroy()}}}}]);